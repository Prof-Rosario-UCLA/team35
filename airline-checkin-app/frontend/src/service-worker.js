import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { BackgroundSyncPlugin } from 'workbox-background-sync';
import { StaleWhileRevalidate, NetworkFirst, NetworkOnly } from 'workbox-strategies';

// eslint-disable-next-line no-restricted-globals
clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
// eslint-disable-next-line no-restricted-globals
precacheAndRoute(self.__WB_MANIFEST);

// --- Caching Strategies ---

// Cache the Google Fonts stylesheets with a stale-while-revalidate strategy.
registerRoute(
  ({url}) => url.origin === 'https://fonts.googleapis.com',
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
  })
);

// Cache API calls to your flights endpoint
// Use a NetworkFirst strategy for data that changes but should be available offline.
registerRoute(
  ({url}) => url.pathname.startsWith('/api/flights'),
  new NetworkFirst({
    cacheName: 'flights-api-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 5 * 60, // 5 minutes
      }),
    ],
  })
);

const bgSyncPlugin = new BackgroundSyncPlugin('bookingQueue', {
  maxRetentionTime: 24 * 60, // Retry for up to 24 hours
});

// Queue failed POST requests to the booking API
registerRoute(
  ({url}) => url.pathname === '/api/seats/reserve', // Adjust to your actual booking endpoint
  new NetworkOnly({
    plugins: [bgSyncPlugin],
  }),
  'POST'
);