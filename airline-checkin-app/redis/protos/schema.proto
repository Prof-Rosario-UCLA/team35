// redis/protos/schema.proto
syntax = "proto3";

package flightcache;

// ————— Messages for POST /flights/{flight_id}/init —————

// InitFlightRequest carries the list of all seat labels that should be considered “free”
// when initializing a flight.
message InitFlightRequest {
  // The entire list of seat identifiers for this flight (e.g. ["1A","1B","1C", …]).
  repeated string all_seats = 1;
}

// Server responds with empty content (HTTP 204) on success, so no explicit response message
// is needed here. If you want an empty placeholder, you can define:
//
// message Empty {} 
//
//
// ————— Messages for GET /flights/{flight_id}/free —————

// FreeSeatsResponse wraps a repeated string of free‐seat labels.
message FreeSeatsResponse {
  repeated string free_seats = 1;
}


// ————— Messages for POST /flights/{flight_id}/book —————

// BookSeatRequest asks the backend to book a single seat for a client.
message BookSeatRequest {
  // The seat label to book (e.g. "12C").
  string seat = 1;

  // The client‐ID (string) of whoever is booking.
  string client_id = 2;
}

// BookSeatResponse indicates whether the booking succeeded or failed.
message BookSeatResponse {
  // True if the seat was successfully booked. If false, the HTTP handler
  // will typically return a 409 Conflict instead of this payload.
  bool booked = 1;
}


// ————— Messages for GET /flights/{flight_id}/booking/{seat} —————

// GetBookingResponse returns the client‐ID who owns that seat. If the seat
// was not booked, the HTTP handler returns a 404 instead of this payload.
message GetBookingResponse {
  // The client_id currently holding this seat (e.g. "client123").
  string client_id = 1;
}
